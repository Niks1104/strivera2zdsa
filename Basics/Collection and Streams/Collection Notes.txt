Collection - It is simply an object that represents a group of objects, known as its elements.
Collection Framework - It provides a set of interfaces and classes that help in managing groups of objects.

Problems with Arrays,Vector, Stack etc.(Before JDK 1.2):
1) Inconsistency
2) Lack of inter-operability
3) No common interfaces


Problems solved with Collection Framework:
1) Unified Architecture: consistent set of interfaces for all collections
2) Inter-operability: Collections can be easily interchanged
3) Reusability: Generic algos can work with any collection
4) Efficiency: Provide efficient algos for basic operations like searching, soring and manipulation.

Collection Interface: 
It is the root interface of Java collection framework. 
It is a part of java.util package.
It is parent interface that is extended by other collection interfaces like List, Set and Queue.
It defines a set of core methods that are implemented by all classes that implement the interface. Common methods like adding, removing, checking the existence.

-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------

List Interface:
It is also part of java.util package.
It provides a way to store an ordered collection of elements and can contain duplicate elements.
Index-based access
It is implemented by several classes like ArrayList, LinkedList, Vector and Stack.

-------------------------------------------------------------------------------------------------------------------------------

ArrayList:
An ArrayList is resizable array	implementation of the List interface.
ArrayList can change its size dynamically as elements are added or removed.
The dynamic resizing is achieved by creating a new array when the current array is full and copying the elements to new array.
Internally, the ArrayList is implemented as an array of Object references.
When you create an ArrayList, it has an initial capacity(default is 10). The capacity refers to the size of the internal array that can hold elements before needing to resize. We can also provide initial capacity manually while instantiating the list.

Various methods of ArrayList
1) list.add(value) - 1,5,80  => size -3, capacity - 10
2) list.get(index)
3) list.size()
4) list.contains(value)
5) list.remove(index)
6) list.remove(value)- in this we need to pass object, so String will work normally, but in case of int, we need to pass value like list.remove(Integer.valueOf(1)), otherwise it will treat it as index
7) list.add(index, value) - insert element between two elements	list.add(2, 50) - 1,5,50,80
8) list.set(index, value) - replace value at particular index list.set(2,50) - 1,5,50	
9) list.addAll(collection)- add all elements at end	
10) list.toArray() - to convert list into array, be default it will create an array of Object type, we can define type manually using list.toArray(new Integer[0]);
11) Collections.sort(list)/ list.sort(null) - to sort the list in ascending order, for other order(custom sorting) we need to provide Comparator object list.sort(comparator)

Adding elements:
1) Check capacity
2) Resize if necessary - usually 1.5 times the current capacity
3) Add the element

Resizing the Array
1) Initial Capacity - 10
2) Growth Factor - new array is created with a capacity 1.5 times an old array
3) Copying elements - copy elements from old array to new array. Time Complexity would be O(n)

Removing elements
1) Check bounds: checks if index is in valid range
2) Remove element: after removing, all elements are shifted one position to left
3) Reduce size by 1

by default capacity won't be decreased, we can do it manually to save memory: list.trimToSize();

Directly we don't have any method to get capacity, but we can get it using Reflections

Instantiating ArrayList
1) List<String> list = new ArrayList<>();
2) List<String> list = Arrays.asList("Mon","Tues"); - partially immutable- we can't add or remove, just we can replace
3) String[] array = {"Apple", "Banana", "Cherry"};
List<String> list2 = Arrays.asList(array);
4) List<Integer> list3 = List.of(1,2,3) - completely immutable - we can't add, remove or replace elements after instantiating.

Time Complexity :

Access by index (get) - O(1)
Adding an element - O(n)
Removing an element - O(n)
Iterate an element - O(n)

-------------------------------------------------------------------------------------------------------------------------------

Comparator: interface to provide custom ordering, it is a functional interface, so we can write implClass or lambdaFunction 
compare() - compare two objects of same type and determine its order

values meaning in compare method (Object o1,Object o2)

0 = o1 and o2 are equal in ordering
-ve = o1 comes before o2
+ve = o1 comes after o2

eg 1: //3 5 
class MyComparator implements Comparator{
	
	@Override
	public int compare(Integer o1, Integer o2){
		return o1-o2;   3-5 = -2 (-ve: o1 comes before o2) //ascending
		return o2-o1; 	5-3 = 2 (+ve: o1 comes after o2) //descending
	}
}

Eg 2: List<String> words = Arrays.asList("banana", "apple", "date"); - sort it according to length
	words.sort(new StringLengthComparator)
	sout(words);
	
eg: //ok bye
	class StringLengthComparator implements Comparator<String>{
		@Override
		public int compare(String s1,String s2){
			//logic for comparison
			return o1.length() - o2.length();  //ascending
			return o2.length() - o1.length();  //descending
		}
	}
	
Rather than writing class, we can use lambda expression as well

List<String> words = Arrays.asList("banana", "apple", "date"); - sort it according to length
	words.sort((a, b) -> a.length() - b.length());   //ascending
	words.sort((a, b) -> b.length() - a.length());   //descending
	sout(words);
	
In Java8 or newer, we can use Comparator.comparing method also

Comparator<Student> comparator = Comparator.comparing(Student::getGpa);  //ascending
Comparator<Student> comparator = Comparator.comparing(Student::getGpa).reversed();  //descending
Comparator<Student> comparator = Comparator.comparing(Student::getGpa).reversed().thenComparing(Student::getName); first sort in descending order on the basis of Gpa, then for same gpa, compare on the basis of name in ascending order

students.sort(comparator); 

-------------------------------------------------------------------------------------------------------------------------------

Comparable

Comparator we use, when we need to provide custom ordering, but for natural ordering, pre-defined classes are implementing Comparable interface. So, if we want our user-defined classes to be sort in a specific order, without defining explicitly using comparator, we also need to implement our class from Comparable interface and override compareTo().

key point: In Comparator's compare method we can give multiple criteria. But in Comparable compareTo method, we can provide only 1 criteria.


0 = if this obj and given obj is equal
-ve = if this obj comes before given obj
+ve = if this obj comes after given obj

//4,3 => 4.compareTo(3) => sort student from highest to lowest GPA.

class Student implements Comparable<Student>{
	public int compareTo(Student s){
		return s.getGpa() - this.getGpa();    //descending, 4 should come before 3, so return negative 3-4 = -1
		return Double.compare(s.getGpa(), this.getGpa()) //use double class compare method
	}
}

-------------------------------------------------------------------------------------------------------------------------------

LinkedList:

A LinkedList is a linear data structure where each element is a separate object called node. Each node contains two parts:
Data: The value stored in the node.
Pointer: Two pointers, one pointing to the next node(next) and the other pointing to the previous node(previous).

General LinkedList implementation internally

class Node{
	public int value;
	public Node next;	//reference to next node
}

public class Test{
	public static void main(){
		Node node1 = new Node();
		Node node2 = new Node();
		
		node1.value = 1;
		node2.value = 2;
		
		node1.next = node2;
		node2.next = null;
	}
}

Comparison with ArrayList:

better for frequent insertion and deletion
slower random access as it has to traverse the list from beginning
requires more memory than ArrayList, because eachnode requires extra memory to store references to next and previous nodes.

Collection's LinkedList 

LinkedList class is part of Collection framework and implements List interface.
A LinkedList stores its elements as nodes in a doubly linked list.

Collection's LinkedList class instantiation

LinkedList<Integer> list = new LinkedList<>();
LinkedList<String> animals = new Linkedlist<>(Arrays.asList("Cat","Dog","Elephant"));
LinkedList<String> animalsToRemove = new Linkedlist<>(Arrays.asList("Dog","Lion"));

LinkedList class methods

1) list.add(value) - to add elements
2) list.get(index) - to get element at given index  - O(n)
3) list.addLast(), list.addFirst() - O(1)
4) list.getFirst(), list.getLast()
5) list.remove(index/ value), list.removeFirst(), list.removeLast() - to remove element from list
6) list.removeIf(predicate) - if want to remove elements, based on some condition, can use in Java8 or upper
7) animals.removeAll(animalsToRemove) 

-------------------------------------------------------------------------------------------------------------------------------

Vector:

legacy class in Java, available in java.util package. Now it also implements List interface and become part of Collection Framework.
It is synchronized and used particularly in multi-threaded environments, where thread safety is a concern.
Internally, Vector uses an array to store its elements.
The default behaviour is to double the size of the array when it runs out of space.

Key Features of Vector:

1) Dynamic Array
2) Synchronized
3) Legacy class
4) Resizing Mechanism
5) Random Access

Instantiation of Vector

1) Vector<Integer> vector = new Vector<>(); //initial capacity =10, by default
2) Vector<>(int initialCapacity) //define initial capacity manually
3) Vector<>(int initialCapacity, int increment) //by default, dynamic array size incresed by 2 twice, we can customize it by giving increment, i.e. capacity + increment, when needed to increase.
4) Vector(Collection<? extends E> c) //create vector from collection elements
eg. Vector<Integer> vector = new Vector<>(Arrays.asList(1,2,3))


Methods in Vector

1) vector.add(value)
2) vector.add(index, value)
3) vector.get(index)
4) vector.set(index, value)
5) vector.remove(Object o)
6) vector.remove(index)
7) vector.size()
8) vector.isEmpty()
9) vector.contains()
10) vector.clear()
11) vector.capacity() - to get capaity of vector

As vector methods are synchronized it can introduce performance overhead .

In modern Java applications, ArrayList is generally preferred over Vector when synchronization is not required.
For thread-safe collections, the CopyOnWriteArrayList or ConcurrentHashMap from the java.util.concurrent package is often recommended instead.

-------------------------------------------------------------------------------------------------------------------------------

Stack

Stack follows LIFO (Last In First out)

Stack extends Vector class. Since stack extends vector, it is synchronized, making it thread safe.

Instantiation of Stack

Stack<Integer> stack = new Stack<>();


Methods of Stack

1) stack.push() - insert element in stack
2) stack.pop() - remove last/top element from stack
3) stack.peek() - to get last or top element but don't remove it
4) stack.isEmpty()
5) stack.size()
6) stack.search(value) - return index of that value from top, 1-based indexing

We can also use vector's methods as it extends Vector class.


We can use LinkedList or ArrayList as Stack

LinkedList<Integer> list = new LinkedList<>();
list.addLast(1);
list.addLast(2); //push
list.getLast(); //peek
list.removeLast(); //pop

ArrayList<Integer> list = new ArrayList<>();
1) list.add(1); //push
2) list.get(list.size()-1); //peek
3) list.remove(list.size()-1); //pop

But using ArrayList as Stack is not recommended, because dedicated methods are not there

-------------------------------------------------------------------------------------------------------------------------------

CopyOnWriteArrayList

"CopyOnWrite" means whenever a write operation, like adding or removing, is performed, instead of directly modifying the existing list, a new copy of list is created, a modification is applied to that copy. The reference to the list is then updated so that subsequent reads use this new list.

This ensures that other threads reading the list while it's being modified are unaffected. Used when read-intrensive operations are there.

Read Operations : Fast and direct

CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();

Using CopyOnWriteArrayList, we can perform add or remove operation, while we are iterating the list, that we can't do with ArrayList.

list.add("Eggs");
list.add("Milk");
list.add("Bread");

for(String item : list){
	if(item.equals("Eggs")){
		list.add("Butter");
		sout("Added Butter while reading");
	}
}

sout("Updated List" + list);

//Output

Eggs
Added Butter while reading
Milk
Bread				//looping on original list

Updated List [Eggs, Milk, Bread, Butter]  //after loop, list is referenced to new copied list

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Map 

Map is a separate interface. Map doesn't implements Collection interface. 
In Java, Map is an object that maps key to values.
It can't contain duplicate keys, and each key can map to at most one value.

Some implementations maintain insertion order(LinkedHashMap), natural order(TreeMap), or no order(HashMap).

-------------------------------------------------------------------------------------------------------------------------------

HashMap


Instantiation

HashMap<Integer, String> map = new HashMap<>();
HashMap<Integer, String> map = new HashMap<>(int initialCapacity, float loadFactor);

methods

1) map.put(key, value) - add key value pair in map
2) map.get(key) - to get value on the basis of key
3) map.containsKey(key) - to check key conains in map or not
4) map.containsValue(value) - to check value contains in map or not
5) map.keySet() - return set of all keys of map
6) map.entrySet() - return set of entries (entries => pair of key and value)
7) map.remove(key)
8) map.remove(key, value)
9) map.getOrDefault(key, defaultValue) - if key present, then return its value, otherwise return defaultValue
10) map.putIfAbsent()- insert in map, only if key is not available
 
Operations:

loop

for(int i : map.keySet())
	sout(map.get(i));
	

Set<Map.Entry<Integer, String>> entries = map.entrySet();

for(Map.Entry<Integer, String> entry: entries){
	sout(entry.getKey() + ":" + entry.getValue());
}

Key characteristics

1) Unordered
2) Can have one null key and multiple null values
3) Not-synchronized
4) Offers constant-time performance O(1) for basic operations like get and put, assuming the hash function disperses elements properly.


*******************************************************************************************************************************
Very Very Important

Internal structure of HashMap

Basic components of HashMap

1) key - identifier to retrieve the value
2) value - data associated with key
3) bucket - a place where key-value pairs are stored, think of buckets as cells in a list(array).
4) hash function - converts a key into an index (bucket location) for storage.

A hash function is an algorithm that takes an input (key) and returns a fixed-size string of bytes, typically a numerical value. The o/p is known as hash code, hash value or simply hash.

The primary purpose of hash function is to map data of arbitrary size to data of fixed size.

Key characteristics

1) Deterministic: same i/p will always produce same o/p.
2) Fixed o/p size eg. 32 bit, 64 bit
3) Efficient computation



How data is stored in HashMap : map.put(key, value)

1) Hashing the Key: First the key is passed through a hash function to generate a unique hash code (an integer number). This hash code helps determine where the key-value pair will be stored in the array (bucket array).

2) Calculating the index : using hashCode, index is calculated through
		int index = hashCode % arraySize
This index decide which bucket wll hold this key-value pair

3) Storing in the bucket: The key-value pair is stored in the bucket at the calculated index. Each bucket can hold multiple key-value pairs   (Collision handling mechanism)

How data is retrieved from HashMap : map.get(key)

1) Hashing the key: Similar to insertion, the key is hashed using the same hash function to calculate its hash code.

2) Finding the index using hashCode

3) Searching the bucket: Once the correct bucket is found, it checks for the key in the bucket. If it finds the key, it returns associated value

Handling Collision

Since different keys can generate same index, called a collision. HashMap uses a technique to handle this situation. Java's HashMap uses Linked lists (or balanced binary search trees (red black tree) after Java 8) for this. If entries are so many, linked list takes lot of time to find key O(N), so to resolve this, if values at specific bucket are more than threshold (8), than linked list is converted into Red Black Tree O(logN) after Java 8.

If multiple key-value pairs map to the same bucket, they are stored in a linked list inside the bucket. When key-value pair is retrieved, the HashMap traverse the linked list, checking each key until it finds a match. It will find a match using equals function. In pre-defined classes, we have both hashCode and equals function. But, in case of custom classes, we need override hashCode and equals method in our class. 

class Node<K,V>{
	final int hash; //hash code of the key	
	final K key;	
	V value;
	Node<K,V> next; //pointer to the next node in case of collision (linked list)
}

Object class hashCode method, works on basis of memory address.
hashCode and equals implementation in custom classes eg. Person class with id and name

public int hashCode(){
	return Objects.hash(name, id);
}

public boolean equals(Object obj){
	
	//edge cases
	if(this == obj) return true;
	if(obj == null) return false;
	if(getClass() != obj.getClass()) return false;
	
	Person other = (Person) obj;
	return id == other.getId() && Objects.equals(name, other.getName()); // null check, Objects.equals()
}


HashMap Resizing (Rehashing)

HashMap has an internal array, which has size by default 16. When the number of elements(key-value pair) grows and exceeds a certain load factor (default is 0.75), HashMap automatically resizes the array to hold more data. This process is called rehashing. Array size is doubled

default size = 16, when more than 12 elements (16*0.75) are inserted, the HashMap will resize(double the size).

During rehashing, all existing entries are rehashed (their positions are re-calculated) and placed into a new array.

Time Complexity-

get() , put(), remove(), containsKey(key) - O(1), assuming no collisions.
In case of collisions, linked list O(N), balanced tree - O(logN)

containsValue(value) - O(n)

size - O(1)

*******************************************************************************************************************************

-------------------------------------------------------------------------------------------------------------------------------

LinkedHashMap

LinkedHashMap is an implementation class of HashMap.
It maintains insertion order. it is little slow as compared to HashMap.

LinkedHashMap<String, Integer> map = new LinkedHashMap<>(); //double linked list
LinkedHashMap<String, Integer> map = new LinkedHashMap<>(initialCapacity);
LinkedHashMap<String, Integer> map = new LinkedHashMap<>(initialCapacity, loadFactor);
LinkedHashMap<String, Integer> map = new LinkedHashMap<>(initialCapacity, loadFactor, accessOrder);

HashMap<String, Integer> map = new HashMap<>();
LinkedHashMap<String, Integer> lhm = new LinkedHashMap<>(map);

accessOrder = true => put the recently accessed element at last of map
accessOrder = false => follows insertion order

LRUCache example  => 3 entries are allowed, at 4th entry least recently used element would be removed from cache

public class LRUCache<K,V> extends LinkedHashMap<K,V> {

	private int capacity;
	
	public LRUCache(int capacity){
		super(capacity, 0.75f, true);
		this.capacity = capacity;
	}
	
	@Override
	protected boolean removeEldestEntry(Map.Entry<K,V> eldest){
		return size()> capacity;    // whenever size is greater than capacity, eldest entry will be removed
	}
	
	public static void main(String[] args){
		LRUCache<String, Integer> studentMap = new LRUCache<>(3);
		studentMap.put("Bob", 99);
		studentMap.put("Alice", 89);
		studentMap.put("Ram", 91);
		studentMap.get(Bob);
		studentMap.put("Vipul",89);  //Alice will be removed
		sout(studentMap);
	}
}

-------------------------------------------------------------------------------------------------------------------------------

WeakHashMap

In WeakHashMap, keys are weak reference, If we don't use it for sometime. JVM will remove it as part of Garbage Collection

-------------------------------------------------------------------------------------------------------------------------------

IdentityHashMap

IdentityHashMap always uses hashCode and equals method of Object class, i.e. based on memory address and ==

String key1 = new String("key");
String key2 = new String("key");

Map<String, Integer> map = new IdentityHashMap<>();

map.put(key1, 1);
map.put(key2, 2);
sout(map); => {key=1, key=2}

-------------------------------------------------------------------------------------------------------------------------------

SortedMap/ NavigableMap/ TreeMap

SortedMap is an interface that extends Map and guarantees that the entries are sorted based on the keys, either in natural ordering or by a specified Comparator. 
NavigableMap extends SortedMap, providing more powerful navigation options such as finding the closest matching key or retrieving the map in reverse order.
TreeMap is implementation class of NavigableMap.

Two ways of sorting:

1) implement our user-defined class from Comparable
2) pass comparator in TreeMap constructor while instantiating

Instantiation

SortedMap<Integer, String> map = new TreeMap<>();
SortedMap<Integer, String> map = new TreeMap<>(Comparator)
Eg: SortedMap<Integer, String> map = new TreeMap<>((a,b) -> b - a);  //descending order

methods

map.put(key, value)
map.firstKey()
map.lastKey()
map.headMap(int toKey) - return data from starting to given key; exclude toKey
map.tailMap(int fromKey) - return data from given key to end; include fromKey
map.subMap(fromKey, toKey) - return data fromKey to toKey

can't have null key

Internal implementation of TreeMap is Red Black Tree (self-balancing binary search tree)

get(), put(), containsKey() - O(log n)
containsValue() - O(n)


NavigableMap<Integer, String> map = new NavigableMap<>();

map.lowerKey(key) - returns the greatest key strictly less than the given key.
map.ceilingKey(key) - return the lowest key strictly greater than or equal to given key.

-------------------------------------------------------------------------------------------------------------------------------

Hashtable
 
As part of Collection framework, it implements Map interface.
It is synchronized and thread safe.
Key and values can't be null.
It is a legacy class. Because it is replaced by ConcurrentHashMap.
slower than hashmap, because of synchronization

Hashtable<Integer, String> hashtable = new Hashtable<>();

method same as Map interface, all methods are synchronized.
internal working is also same as map, except hashtable only uses linked list

-------------------------------------------------------------------------------------------------------------------------------

ConcurrentHashMap

lock-free , thread safe
ConcurrentHashMap implements ConcurrentMap, and ConcurrentMap extends Map interface.

Java 7 -> segment based locking --> map will be divided into segments (by default 16 segments) --> smaller hashmaps
each segment has its own lock., Only the segment being written to or read from is locked
read: do not require locking unless there is a write operation happening on the same segment
write: lock the segment

Java 8 or upper -> no segmentation  --> Compare and swap --> no locking except resizing and collision
Thread A last saw x= 42
Thread A work => change x to 50
//compare and swap --> if x is still 42, then change it to 50 else don't change and retry
//If CAS fails multiple times, then thread wait for some time then retry.

ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();

ConcurrentHashMap doesn't double the capacity, it incrementally increases.

-------------------------------------------------------------------------------------------------------------------------------

ConcurrentSkipListMap

ConcurrentSkipListMap is sorted as well as synchronized (thread-safe), can also be considered as ConcurrentTreeMap.
data is stored in skipList data structure. SkipList ia a probabalistic data structure, that allows efficient search, insertion and deletion operation. It is similar to a sorted linked list but with multiple layers that skip over portions of the list to provide faster access to elements.

ConcurrentSkipListMap implements ConcurrentNavigableMap which in turn extends NavigableMap.

-------------------------------------------------------------------------------------------------------------------------------

EnumMap

EnumMap implements Map interface.
If all the keys in a Map are values from a single enum, it is recommended to use an EnumMap as the specific implementation, which has the advantage of knowing all the keys in advance.

public Enum Day{
	SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

Map<Day, String> map = new EnumMap<>(Day.class);

array of size same as Enum
EnumMap doesn't require hashing, ordinal/index is used it just map value to index of Enum value. 
faster than hashMap, and memory efficient

-------------------------------------------------------------------------------------------------------------------------------

ImmutableMap

contents can't be changed after instantiation. 

Map<Integer, Integer> map = Map.of(key1, v1, key2, v2); //introduced after Java 9, and it is limited to 10 key-value pairs

map.put(k3, v3); //throws error

Map.ofEntries(Map.Entry(k1,v1), Map.Entry(k2,v2)); //also immutable, unlimited entres are allowed

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Set

Set is an interface that extends Collection interface
Set is a collection that doesn't contain duplicate elements
faster operations
Set is an interface and it's implementation classes are HashSet, LinkedHashSet, TreeSet, EnumSet

-------------------------------------------------------------------------------------------------------------------------------

HashSet

HashSet is an implementation class of Set interface.

Set<Integer> set = new HashSet<>();

Internal working of HashSet

internally it is using HashMap only, this are stored as key in map and value is dummy values.

Methods

1) set.add(value)
2) set. isEmpty()
3) set.clear()
4) set.remove()

all methods from Collection interface

-------------------------------------------------------------------------------------------------------------------------------
LinkedHashSet

maintain insertion order

-------------------------------------------------------------------------------------------------------------------------------

TreeSet

maintain natural order of values

-------------------------------------------------------------------------------------------------------------------------------

EnumSet 

similar to EnumMap, if set is created from Enum, use EnumSet

-------------------------------------------------------------------------------------------------------------------------------

ConcurrentSkipListSet

implements NavigableSet -> SortedSet
built-in thread safety and sorted
weakly consistent

-------------------------------------------------------------------------------------------------------------------------------

ImmutableSet

Set<Integers> set = Set.of(1,2,3,4,5,6); //unlimited are allowed, immutable

-------------------------------------------------------------------------------------------------------------------------------

CopyOnWriteArraySet

thread safe but not sorted
CopyOnWrite mechanism
No duplicate elements
Iterators do not reflect modifications  (same as CopyOnWriteArrayList)
used when application is read intensive

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Queue

A data structure that worrks on FIFO (First In First Out) principle.
Elements are added at the end and removed from the front.

LinkedList can be used as Queue

Linkedlist<Integer> list = new LinkedList<>();

list.addLast(); //enqueue
list.removeFirst(); //dequeue
list.getFirst(); //peek

But there will be complexity, so Java has provided one interface Queue.

-------------------------------------------------------------------------------------------------------------------------------

LinkedList

LinkedList is a class that is an implementation of Queue interface

Queue<Integer> queue = new LinkedList<>();

queue.add();   queue.offer(); //equeue
queue.remove();	queue.poll(); //dequeue
queue.peek();  queue.element(); //peek

If no element found, queue.remove() throws exception; whereas queue.poll() return null
If no element found, queue.element() throws exception; whereas queue.peek() return null

If queue is full, queue.add() throws error,; whereas queue.offer() do nothing

-------------------------------------------------------------------------------------------------------------------------------

PriorityQueue

PriorityQueue is also an implementation of Queue interface.
orders elements based on their natural ordering (for primitives lower first).   //not sorted
custom comparator for customized ordering
head element should have highest priority.
does not allow null elements

PriorityQueue<Integer> pq= new PriorityQueue<>();
PriorityQueue<Integer> pq= new PriorityQueue<>(comparator);

*******************************************************************************************************************************
Internal Working of Priority Queue

PriorityQueue is implemented as a min-heap by default(for natural ordering)

Min-heap - a tree where every element should be smaller than or equal to its children

insert/ remove - O(log n)
peek - O(1)

-------------------------------------------------------------------------------------------------------------------------------

Deque => Double ended queue

insertion and deletion are allowed at both ends.
support both stack and queues operation

addFirst(), addLast(), offerFirst(), offerLast() -> similar for remove, poll, peek, get
push(), pop() - stack methods

Deque<Integer> deque = new ArrayDeque<>();  //internally array so faster iteration. low memory consumption, no null allowed
//circular=> head, tail, so no need to shift elements, only move head tails

Dequq<Integer> deque2 = new LinkedList<>();  //insertion, deletion somewhere in middle

-------------------------------------------------------------------------------------------------------------------------------

BlockingQueue

thread-safe queue
wait for queue to become non-empty/ wait for space
simplify concurrency problems like producer-consumer
standard queue => immediately

Methods

put() - blocks if the queue is full, until space becomes available
take() - blocks if queue is empty until an element becomes available
offer() - wait for space to become available, up to the specified timeout.

BlockingQueue is an interface, which is implemented by several classes

-------------------------------------------------------------------------------------------------------------------------------

ArrayBlockingQueue

impl class of BlockingQueue
A bounded, blocking queue backed by an array
low memory overhead
uses a single lock for both enqueue and dequeue operation
problems in case of more thread

BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(capacity);

-------------------------------------------------------------------------------------------------------------------------------

LinkedBlockingQueue

if capacity is not given create queue with Integer.MAX_VALUE
optionally bounded, backed by linked list
uses two separate locks for enqueue and dequeue operations 
higher concurrency b/w producers and consumers

-------------------------------------------------------------------------------------------------------------------------------

PriorityBlockingQueue

initial capacity 11, optionally bounded
binary heap as array and can grow dynamically
Head is based on their natural ordering or a provided comparator like PriorityQueue
can be consumed according to priority
put won't block

BlockingQueue<String> queue = new PriorityBlockingQueue<>(initialCapacity, comparator)

-------------------------------------------------------------------------------------------------------------------------------

SynchronousQueue

each insert operation must wait for a corresponding remove operation by another thread and vice-versa
it can't store elements, capacity of at most 1 element.

-------------------------------------------------------------------------------------------------------------------------------

DelayQueue

Thread-safe unbounded blocking queue
Elements can only be taken from the queue when their delay has expired
Useful for scheduling tasks to be executed after a certain delay.
internally priority queue

class DelayedTask implements Delayed{
	override methods, getDelay and compareTo
}

BlockingQueue<DelayedTask> queue = new DelayQueue<>();

-------------------------------------------------------------------------------------------------------------------------------

ConcurrentLinkedQueue

non-blocking, lock-free, thread-safe queue, uses compare and swap technique

An implementation of the Queue interface that supports lock-free, thread-safe operations
improves performance

add()
poll()

------------------------------------------------------------------------------------------------------------------------------

ConcurrentLinkedDeque

non-blocking, lock-free, thread-safe double ended queue, uses compare and swap technique


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Iterable  ---> iterator()

because of this method, we can use forEach loop on our Collection classes

for(int i: list)
	sout(i);

internal code of forEach loop

Iterator<Integer> iterator = list.iterator();
while(iterator.hasNext())
	sout(iterator.next());
	
Iterator provides us capability to remove the elements while iterating

List<Integer> numbers = new ArrayList<>();

Iterator<Integer> itr = numbers.iterator();
while(itr.hasNext()){
	Integer number = itr.next();
	if(number%2 == 0)
		itr.remove();
}

ListIterator<Integer> listIterator = numbers.listIterator();
while(listIterator.hasNext()){
	listIterator.set(index, value);
}




